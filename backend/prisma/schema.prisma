// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int       @id @default(autoincrement())
  email        String    @unique
  passwordHash String    @map("password_hash")
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")

  // Relations
  categories    Category[]
  transactions  Transaction[]
  budgets       Budget[]
  goals         FinancialGoal[]

  @@map("users")
}

enum TransactionType {
  INCOME
  EXPENSE
}

model Category {
  id        Int             @id @default(autoincrement())
  name      String
  type      TransactionType
  color     String          @default("#3B82F6")
  icon      String          @default("dollar-sign")
  userId    Int             @map("user_id")
  createdAt DateTime        @default(now()) @map("created_at")

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  transactions Transaction[]
  budgets      Budget[]

  @@map("categories")
}

model Transaction {
  id              Int             @id @default(autoincrement())
  userId          Int             @map("user_id")
  categoryId      Int?            @map("category_id")
  amount          Decimal         @db.Decimal(10, 2)
  description     String?
  transactionDate DateTime        @map("transaction_date") @db.Date
  type            TransactionType
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  // Relations
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)

  @@map("transactions")
}

enum BudgetPeriod {
  WEEKLY
  MONTHLY
  YEARLY
}

model Budget {
  id           Int          @id @default(autoincrement())
  userId       Int          @map("user_id")
  categoryId   Int          @map("category_id")
  name         String
  budgetAmount Decimal      @map("budget_amount") @db.Decimal(10, 2)
  period       BudgetPeriod @default(MONTHLY)
  startDate    DateTime     @map("start_date") @db.Date
  endDate      DateTime     @map("end_date") @db.Date
  createdAt    DateTime     @default(now()) @map("created_at")

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("budgets")
}

enum GoalStatus {
  ACTIVE
  COMPLETED
  PAUSED
}

model FinancialGoal {
  id            Int        @id @default(autoincrement())
  userId        Int        @map("user_id")
  title         String
  description   String?
  targetAmount  Decimal    @map("target_amount") @db.Decimal(10, 2)
  currentAmount Decimal    @default(0) @map("current_amount") @db.Decimal(10, 2)
  targetDate    DateTime   @map("target_date") @db.Date
  status        GoalStatus @default(ACTIVE)
  createdAt     DateTime   @default(now()) @map("created_at")
  updatedAt     DateTime   @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("financial_goals")
}